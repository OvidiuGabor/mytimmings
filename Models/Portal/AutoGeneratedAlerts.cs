using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace mytimmings.Models.Portal
{
    //this class will create autogenerated alerts based on some settings
    public class AutoGeneratedAlerts
    {
        private static List<Alert> alerts { get; set; }
        private static Models.Security.User User;



        public static List<Alert> GenerateAlerts(Models.Security.User user)
        {

            User = user;
            alerts = checkForDaysThatAreNotUpdated();

            return alerts;
        }

        private static List<Alert> checkForDaysThatAreNotUpdated()
        {
            var db = new DBContext.DBModel();
            List<Alert> alerts = new List<Alert>();

            //get the list of dates when the user has not submited worklogs or is not on leave;
            DateTime today = DateTime.UtcNow.Date;
            const int daysToCheck = -30;

            //we need to check for the past 30 days the user and see if it has updated the worklog or is on leave;
            DateTime start = today.AddDays(daysToCheck).Date;

            List<DateTime> listOfDatestoCheck = new List<DateTime>(); //list of dates that needs to be checked
            for(int i = daysToCheck; i < 0; i++)
            {
                if(today.AddDays(i).DayOfWeek != DayOfWeek.Sunday && today.AddDays(i).DayOfWeek != DayOfWeek.Saturday)// exclude sunday and saturday
                    listOfDatestoCheck.Add(today.AddDays(i).Date);
            }


            //first get a list of days on which the user has not updated the worklog
            var listOfUpdatedDates = db.Main_Data.Where(x => x.Status_Start_Time >= start && x.Status_Start_Time < today.Date && x.User_ID == User.ID).Select(x =>x.Status_Start_Time).Distinct().ToList(); //list of the dates where the user made an update
            var filteredList = listOfUpdatedDates.Select(x => x.Date).ToList();
            filteredList = filteredList.Distinct().ToList();
            //if the 2 lists have the same number of elements, means that the user has already updated all the days
            if (listOfDatestoCheck.Count == filteredList.Count)
                return alerts;

            //check if there are any leaves in that timeframe
            var leaves = db.Leaves.Where(x => x.UserId == User.ID && ((x.StartDate.Value >= start.Date && x.StartDate.Value < today.Date) || (x.StartDate.Value < start.Date && x.EndDate.Value > start.Date))).ToList();
            List<DateTime> leaveDays = new List<DateTime>();// list of the actual leave days;
            if(leaves.Count > 0)
            {
                foreach(var leave in leaves)
                {
                    var days = (leave.EndDate.Value - leave.StartDate.Value).Days; //get he number of days that exists in the vacation
                    //get the actual days that are in the leave;
                    var startD = leave.StartDate.Value.Date;
                    for (var i = days; i > 0; i--)
                    {
                        leaveDays.Add(startD.AddDays(i).Date);
                    }

                }
            }

            //remove any date that is in the leave list
            foreach (var leave in leaveDays)
            {
                if (listOfDatestoCheck.Contains(leave))
                    listOfDatestoCheck.Remove(leave);
            }

            //now actually remains all other dates
            //check the remaining list against the one we extracted
            //after removing the leaves, check again to see if the list matches with the one already extracted;
            if (listOfDatestoCheck.Count == filteredList.Count)
                return alerts;

            //get the pending leave? or leave it as alert?

            //check for any bank holidays
            var bankHolidays = db.Public_Holidays.Where(x => x.Holiday_country == User.Country && (x.Holiday_date.Value > start.Date && x.Holiday_date.Value < today.Date)).ToList();

            foreach(var bh in bankHolidays)
            {
                if (listOfDatestoCheck.Contains(bh.Holiday_date.Value.Date))
                    listOfDatestoCheck.Remove(bh.Holiday_date.Value.Date);
            }



            foreach (var workday in filteredList)
            {
                if(listOfDatestoCheck.Contains(workday.Date))
                    listOfDatestoCheck.Remove(workday);
            }

            //now after removing the actual posted dates, we should remain with the dates that are actually not updated
            //return the list
            string message = "You appear to be absent on the following dates: <strong>";
            string datesFormated = "";
            if(listOfDatestoCheck.Count > 0)
            {
                foreach(var item in listOfDatestoCheck)
                {
                    datesFormated += item.Date.ToString("dd MMM yyyy") + "; ";
                }
                datesFormated = datesFormated.Remove(datesFormated.Length - 2, 2);
            }
            //message = message.Remove(message.Length - 3, 2);
            message += datesFormated + "</strong>";
            message += " . Please go and update the records accordingly!";


            alerts.Add(CreateMissingDay(message, true, true));



            return alerts;


        }

        


        private static Alert CreateMissingDay(string message, bool onDutyBtn, bool onLeaveBtn)
        {
            if (string.IsNullOrEmpty(message))
                throw new ArgumentNullException("Message parameter cannot be null or empty!");


            var alert = new Alert(User.ID, message, onDutyBtn, onLeaveBtn,false);

            return alert;
        }
    }
}