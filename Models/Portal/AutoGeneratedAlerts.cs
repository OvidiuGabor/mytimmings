using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace mytimmings.Models.Portal
{
    //this class will create autogenerated alerts based on some settings
    public class AutoGeneratedAlerts
    {
        private static List<Alert> alerts { get; set; }
        private static string UserId;



        public static List<Alert> GenerateAlerts(string userId)
        {

            UserId = userId;


            return alerts;
        }

        private static List<Alert> checkForDaysThatAreNotUpdated(string userId)
        {
            var db = new DBContext.DBModel();
            List<Alert> alerts = new List<Alert>();

            //get the list of dates when the user has not submited worklogs or is not on leave;
            DateTime today = DateTime.UtcNow.Date;
            int daysToCheck = -30;

            //we need to check for the past 30 days the user and see if it has updated the worklog or is on leave;
            DateTime start = today.AddDays(daysToCheck).Date;

            List<DateTime> listOfDatestoCheck = new List<DateTime>(); //list of dates that needs to be checked
            for(int i = daysToCheck; i < 0; i++)
            {
                if(today.AddDays(-1).DayOfWeek != DayOfWeek.Sunday || today.AddDays(-1).DayOfWeek != DayOfWeek.Saturday)// exclude sunday and saturday
                    listOfDatestoCheck.Add(today.AddDays(i).Date);
            }


            //first get a list of days on which the user has not updated the worklog
            var listOfUpdatedDates = db.Main_Data.Where(x => x.Status_Start_Time.Date >= start && x.Status_Start_Time < today.Date && x.User_ID == userId).Select(x =>x.Status_Start_Time).Distinct().ToList(); //list of the dates where the user made an update
            //if the 2 lists have the same number of elements, means that the user has already updated all the days
            if (listOfDatestoCheck.Count == listOfUpdatedDates.Count)
                return alerts;

            //check if there are any leaves in that timeframe
            var leaves = db.Leaves.Where(x => (x.StartDate.Value.Date >= start.Date || x.EndDate < today.Date) && x.UserId == userId).ToList();
            List<DateTime> leaveDays = new List<DateTime>();
            if(leaves.Count > 0)
            {
                foreach(var leave in leaves)
                {
                    var days = (leave.EndDate.Value - leave.StartDate.Value).Days; //get he number of days that exists in the vacation


                }
            }

            foreach(var date in listOfUpdatedDates)
            {

            }
            





            return alerts;


        }




    }
}