@model mytimmings.Models.Portal.Dashboard
<link href="~/Content/Stylesheet/Portal.css" rel="stylesheet" />
<script src="~/Scripts/Chart.js"></script>
@{
    ViewBag.Title = "Overview";
}
<div class="w3-main" style="margin-left: 300px; margin-top: 43px;">
    <div class="w3-container conainer-padding" style="padding-top: 60px">
        <h1>My Dashboard</h1>
        @*<hr />*@
    </div>
    @*<div class="width-and-center" style="text-align:left; margin-top: 25px ">
            <h3>My Stats</h3>
        </div>*@

    <div class="w3-container conainer-padding" style="padding-top: 10px">
        <div class="row user-information-header small-box-shadow-cord" style="margin-left: 0px">
            <div class="col-md-3 w3-white round-corners-left-15">
                <div class="user-body">
                    <div class="user-details">
                        <div class="user-detail-title">
                            @{
                                var name = Model.user.FirstName.ToString() + " " + Model.user.LastName.ToString();
                            }
                            @name
                        </div>
                        <div class="user-detail-test">
                            @Model.user.JobTitle

                        </div>
                    </div>
                    <div class="devider redish"></div>
                </div>

            </div>
            <div class="col-md-3 w3-white">
                <div class="user-body">
                    <div class="user-details">
                        <div class="user-detail-title">
                            Employee Id
                        </div>
                        <div class="user-detail-test">
                            @Model.user.ID

                        </div>
                    </div>
                    <div class="devider redish"></div>
                </div>

            </div>
            <div class="col-md-3 w3-white">
                <div class="user-body">
                    <div class="user-details">
                        <div class="user-detail-title">
                            Joining Date
                        </div>
                        <div class="user-detail-test">
                            @Model.user.StartDate.ToString("dd MMMM yyyy")

                        </div>
                    </div>
                    <div class="devider redish"></div>
                </div>

            </div>
            <div class="col-md-3 w3-white round-corners-right-15">
                <div class="user-body">
                    <div class="user-details">
                        <div class="user-detail-title">
                            Department
                        </div>
                        <div class="user-detail-test">
                            @Model.user.Department

                        </div>
                    </div>
                    @* <div class="devider grey"></div>*@
                </div>

            </div>

        </div>
        <div class="container-fluid">
            <div class="row user-time-status g-2" style="padding-top: 10px; margin-left: 0px">
                <div class="col-md-9 w3-white round-corners-left-15 round-corners-right-15 margin-right-1 small-box-shadow-cord">
                 
                        <div class="timesheat-card-title">
                            <div class="timesheet-title">
                                <h5>Work hours</h5>
                            </div>
                            <div class="user-choice">
                                <select onchange="changePeriodForChart(value)">
                                    <option value="1" selected> Last 7 days</option>
                                    <option value="2"> Last Month</option>
                                    <option value="3"> Last 3 Months</option>
                                </select>
                            </div>
                        </div>

                        <div class="drawning-canvas">
                            
                            <canvas id="myChart" width="400" height="400"></canvas>
                        </div>
                   
                </div>
                <div class="col-md-3 w3-white round-corners-left-15 round-corners-right-15 small-box-shadow-cord">
                    <div class="timesheat-card-title">
                        <div class="timesheet-title">
                            <h5>My stats</h5>
                        </div>

                    </div>
                    <div class="row" style="text-align: center; margin-top: 10px;">
                        <div class=" col-md-6 w3-white" style="padding-right: 0px;">
                            <div class="my-stats-box" style="border-bottom: 1px solid rgba(101,107,123, 0.3); border-right: 1px solid rgba(101,107,123, 0.3) ">
                                <p>Today's Time In'</p>
                            </div>

                        </div>
                        <div class=" col-md-6 w3-white" style="padding-left: 0px">
                            <div class="my-stats-box" style=" border-bottom: 1px solid rgba(101,107,123, 0.3)">
                                <p>Break Time</p>
                            </div>
                        </div>
                    </div>
                    <div class="row" style="text-align: center;">
                        <div class=" col-md-6 w3-white" style="padding-right: 0px;">
                            <div class="my-stats-box" style="border-bottom: 1px solid rgba(101,107,123, 0.3); border-right: 1px solid rgba(101,107,123, 0.3)">
                                <p>Work Time</p>
                            </div>

                        </div>
                        <div class=" col-md-6 w3-white" style="padding-left: 0px">
                            <div class="my-stats-box" style="border-bottom: 1px solid rgba(101,107,123, 0.3);">
                                <p>Log Out time</p>
                            </div>
                        </div>
                    </div>
                    <div class="row" style="text-align: center;">
                        <div class=" col-md-6 w3-white" style="padding-right: 0px;">
                            <div class="my-stats-box" style="border-right: 1px solid rgba(101,107,123, 0.3)">
                                <p>Total Leaves</p>
                            </div>

                        </div>
                        <div class=" col-md-6 w3-white" style="padding-left: 0px">
                            <div class="my-stats-box" ">
                                <p>Remaining Leaves</p>
                            </div>
                        </div>
                    </div>

                    <div class="row" style="text-align: center; margin-top: 28px;">
                        <div class=" col-md-6 w3-white" style="padding: 0px; border-bottom-left-radius: 15px">
                            <div class="my-stats-box " style="background-color: rgba(242,243, 247, 0.7)">
                                <a href="">View my Tasks -></a>
                            </div>

                        </div>
                        <div class=" col-md-6 w3-white" style="padding: 0px; border-bottom-right-radius: 15px">
                            <div class="my-stats-box" style="background-color: rgba(242,243, 247, 0.7)">
                                <a href="">View my Leaves -></a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        

    </div>
</div>

<script>

    var dataFromTheModel = @Html.Raw(Json.Encode(Model.dailyTotalHours.ToList()));
    var parsedData = parseDataForChart(dataFromTheModel);


    const ctx = document.getElementById('myChart');
    const plugin = {
        id: 'custom_canvas_background_color',
        beforeDraw: (chart) => {
            const ctx = chart.canvas.getContext('2d');
            ctx.save();
            ctx.globalCompositeOperation = 'destination-over';
            ctx.fillStyle = 'white';
            ctx.fillRect(0, 0, chart.width, chart.height);
            ctx.restore();
        }
    };
    const myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: parsedData.label,
            datasets: [{
                label: 'Hours',
                data: parsedData.data,
                backgroundColor: parsedData.color
                //backgroundColor: [
                //    'rgba(255, 99, 132, 1)',
                //    'rgba(54, 162, 235, 1)',
                //    'rgba(255, 206, 86, 1)',
                //    'rgba(75, 192, 192, 1)',
                //    'rgba(153, 102, 255, 1)',
                //    'rgba(255, 159, 64, 1)' ,
                //    'rgba(255, 159, 64, 1)'
                //]
                //borderColor: [
                //    'rgba(255, 99, 132, 1)',
                //    'rgba(54, 162, 235, 1)',
                //    'rgba(255, 206, 86, 1)',
                //    'rgba(75, 192, 192, 1)',
                //    'rgba(153, 102, 255, 1)',
                //    'rgba(255, 159, 64, 1)'
                //],
               //borderWidth: 1
            }]
        },

        options: {
            "hover": {
                "animationDuration": 1
            },
            "animation": {
/*                "duration": 1,*/
                "onComplete": function () {
                    var chartInstance = this.chart,
                        ctx = chartInstance.ctx;

                    ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'bottom';

                    this.data.datasets.forEach(function (dataset, i) {
                        var meta = chartInstance.controller.getDatasetMeta(i);
                        meta.data.forEach(function (bar, index) {
                            var data = dataset.data[index];
                            ctx.fillText(data, bar._model.x, bar._model.y - 5);
                        });
                    });
                }
            },
            responsive: true,
            maintainAspectRatio: false,
            legend: {
                "display": false
            },
            tooltips: {
                "enabled": false
            },
            scales: {

                yAxes: [{
                    //display: 'false',
                    gridLines: {
                        display: false
                    },
                    ticks: {
                        max: 10,
                        //display: false,
                        beginAtZero: true
                    }

                }],

                xAxes: [{
                    gridLines: {
                        display: false
                    },
                     ticks: {
                        beginAtZero: true
                    }

                }]

            }
        },
         plugins: [plugin]
    });


    function parseDataForChart(dataToParse) {
        var outputData = {
            "label": [],
            "data": [],
            "color": []
        };

        if (dataToParse == null)
            return outputData;

        for (const entry of dataToParse.entries()) {

            outputData.label.push(entry[1].Key);
            outputData.data.push(entry[1].Value);
            outputData.color.push(getColorbyValue(entry[1].Value))

        }

        return outputData;

    }


    function changePeriodForChart(newPeriod) {

        console.log(newPeriod)
        var data = {
            periodType: newPeriod
        }
        var notif = new Notifier();
        $.ajax({
            type: "post",
            url: '@Url.Action("ChangePeriodForChart", "Portal")',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(data),
            dataType: "json",
            success: function (data) {
               console.log(data.data)
                if (data.result == true) {

                    var parsedData = parseDataForChart(data.data)
/*                    refresh the chart data, with the new one based on the choice*/
                    myChart.data.labels = parsedData.label
                    myChart.data.datasets.forEach((dataset) => {
                        dataset.data = parsedData.data;
                        dataset.backgroundColor = parsedData.color;
                    })
                    myChart.update();

                } else if (data.result == false && data.isRedirect == true) {
                        window.location.href = json.redirectUrl;

                } else {
                    notif.error(data.message, "Error");
                }
                
            },
            error: function (data) {
                notif.error("Something happen! Please try again later!", "Error");
            }

        })
    }







    //Set the Color Scheme for the bar temporartly, till i found a better solution
    function getColorbyValue(value) {
        const colorScheme = ["#4a7dff", "#ff8800", "#f93939"]

        if (value > 8) {
            return colorScheme[0]
        }
        else if (value < 8 && value > 6) {
            return colorScheme[1];
        }
        else {
            return colorScheme[2];
        }



    }

</script>