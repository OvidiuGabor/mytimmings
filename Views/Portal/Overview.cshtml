@model mytimmings.Models.Portal.Overview
<link href="~/Content/Stylesheet/Portal.css" rel="stylesheet" />
@{
    ViewBag.Title = "Overview";
}
<div class="container w3-main">
    <div class="page-tile width-and-center">
        <h1>My Dashboard</h1>
        <hr />
    </div>
    <div class="width-and-center" style="text-align:left; margin-top: 25px ">
        <h3>My Stats</h3>
    </div>
    <div class="top-cards-container card-columns width-and-center">

        <div class="card bg-white card-shadow">
            <div class="card-body text-left">
                <div style="display: inline-block">
                    <h2 class="card-text">Total Hours</h2>
                    <p class="card-text">@Math.Round(Model.WorkingHours.TotalTime.TotalHours, 2) Hrs</p>
                </div>
                <div style="display: inline-block; float: right;">
                    <img src="~/Content/SVG/icon-total-hours.svg" class="card-img" />
                </div>
            </div>

        </div>
        <div class="card bg-white card-shadow">
            <div class="card-body text-left">
                <div style="display: inline-block">
                    <h2 class="card-text">Productive Hours</h2>
                    <p class="card-text">@Math.Round(Model.WorkingHours.Productive.TotalHours, 2) Hrs</p>
                </div>
                <div style="display: inline-block; float: right;">
                    <img src="~/Content/SVG/icon-pro-hours.svg" class="card-img" />
                </div>
            </div>

        </div>
        <div class="card bg-white card-shadow">
            <div class="card-body text-left">
                <div style="display: inline-block">
                    <h2 class="card-text">Non Productive Hours</h2>
                    <p class="card-text">@Math.Round(Model.WorkingHours.NonProductive.TotalHours, 2) Hrs</p>
                </div>
                <div style="display: inline-block; float: right;">
                    <img src="~/Content/SVG/icon-idle-hours.svg" class="card-img" />
                </div>
            </div>

        </div>
        <div class="card bg-white card-shadow">
            <div class="card-body text-left">
                <div style="display: inline-block">
                    <h2 class="card-text">Non Productive Hours</h2>
                    <p class="card-text">@Math.Round(Model.WorkingHours.NonProductive.TotalHours, 2) Hrs</p>
                </div>
                <div style="display: inline-block; float: right;">
                    <img src="~/Content/SVG/icon-total-hours.svg" class="card-img" />
                </div>
            </div>

        </div>


    </div>


    <div class="middle-part-container width-and-center card-columns" style="column-count: 2 !important">

        <div class="card bg-white card-shadow" style="width: 151.5%">
            <div class="card-body text-left" style="padding-left: 70px; padding-right: 70px;">
                <div style="display: inline-block">
                    <h2 class="card-text">Today Progress</h2>
                </div>
                <div class="trackbar" id="time-trackbar">
                    <div class="track-button" id="track-pointer">
                        <p id="time-keeper">00:00</p>
                        <img src="~/Content/SVG/Bar-tracker.svg" style="height: 60px;"/>
                    </div>
                    <div id="track-line" class="track-line" data-maxTime="@Model.TimeTracker.MaxFinishTime"></div>
                </div>

                <div class="main-form">
                    <div class="left-buttons">
                        <button type="button" class="btn btn-primary" id="checkIn-btn" onclick="CheckIn()">Check in</button>
                        <button type="button" class="btn btn-primary" id="checkOut-btn">Check Out</button>

                        @Html.DropDownListFor(model => model.ActionName, Model.ActionsDropDown, new { @class = "form-control" })

                        @Html.DropDownListFor(model => model.ProjectId, Model.ProjectDropDown, new { @class = "form-control" })

                    </div>
                    <div class="right-text-box">

                    </div>
                </div>

            </div>


        </div>
        <div class="card bg-white card-shadow" style="width: 48.5%; float: right">
            <div class="card-body text-center">
                <div style="display: inline-block">
                    <h2 class="card-text">Actions</h2>
                </div>

               
            </div>

        </div>
    </div>


    <div class="bottom-cards-container width-and-center">

    </div>

</div>


<script>
    class TimeTracker{

        constructor(obj) {
            //this.startTime = ConvertJsonToDate(obj.StartTime).getSeconds();
            this.startTime = ConvertJsonToDate(obj.StartTime)
            this.currentTime = this.SetCurrentTime()
            this.endTime = ConvertJsonToDate(obj.EndTime)
            this.trackBar = document.getElementById("time-trackbar").querySelector("#track-pointer");
            this.position = 0;

        }

        CalculatePosition() {
            this.SetCurrentTime();
            if (this.startTime != null) {
                var TotalDistance = Math.abs((this.startTime - this.endTime) / 1000)
                var distanceSoFar = Math.abs((this.startTime - this.currentTime) / 1000)
                this.position = (distanceSoFar / TotalDistance) * 100
                this.trackBar.style.left = this.position + "%";
            }
            this.ShowTimeToHtml();
        }
        SetCurrentTime() {
            this.currentTime = new Date();
        }


        ShowTimeToHtml() {

            var html = document.getElementById("track-pointer");
            var p = html.getElementsByTagName("p")[0];
            var elapsedTime = (Math.abs(this.startTime - this.currentTime) / 1000) / 3600 //get total hours and minutes
            var h = this.float2int(elapsedTime) //get hours
            var m = this.float2int((elapsedTime % 1) * 60) // get minutes

            var formatedTime = this.checkTime(h) + ":" + this.checkTime(m);
            p.innerHTML = formatedTime;
        }

        checkTime(time) {
            if (time < 10) {
                return "0" + time;
            }
            return time
        }
        float2int(value) {
            return ~~value; //this one returns the whole number from a floating number (2.45885 -> 2)
        }
    }

    function ConvertJsonToDate(jsonDatetoConvert) {
        if (jsonDatetoConvert != null) {

            //Since the date received from the server is in UTC Format, we need to convert it to local timezone.
            //ge the time zone offset
            var timeZone = new Date().getTimezoneOffset() * 60000;

            var convertedDate = new Date(new Date(Number(jsonDatetoConvert.replace(/\D/g, ''))).getTime() - timeZone);

            return convertedDate;
        }
        return null;
    }


    var obj = @Html.Raw(Json.Encode(Model.TimeTracker));
    var timeTracker = new TimeTracker(obj);
    console.log(obj)
    if (obj.StartTime != null) {
        setInterval(() => timeTracker.CalculatePosition(), 1000)
    }



    function CheckIn() {

        var obj = {
            Type: "",
            ProjectId: 0
        }

        obj.Type = document.getElementById("ActionName").value;
        obj.ProjectId = document.getElementById("ProjectId").value
        var data = JSON.stringify(obj);
        //var data = "aaaaa";
        $.ajax({
            type: 'POST',
            contentType: 'application/json',
            url: '@Url.Action("CheckIn", "Portal")',
            dataType: 'json',
            data: data,
            success: function (result) {

            },
            error: function (result) {

            }
        })


    }
</script>