@model IEnumerable<mytimmings.Models.Portal.DayRecord>




<link href="~/fullcalendar/lib/main.css" rel="stylesheet" />
<script src="~/fullcalendar/lib/main.js"></script>
@Styles.Render("~/Portal/css")


<style>
    #external-events {
        position: fixed;
        margin-top: 68px;
        z-index: 2;
        width: 150px;
        padding: 0 10px;
        border: 1px solid #ccc;
        background: #eee;
        margin-left: 5px
    }

        #external-events .fc-event {
            cursor: move;
            margin: 3px 0;
        }

    #calendar-container {
        position: relative;
        z-index: 1;
        margin-left: 200px;
    }
    html{
      /*  overflow: hidden*/
    }
    .main-wrapper {
        height: 800px
    }
    .calendar-container{
        height: 100%
    }
    .save-btn{
        position: fixed;
        margin-top: 25em;
        text-align: center;
        margin-left: 15px;
    }
</style>


<div class="main-body-container w3-main">
    @Html.Partial("_EventOption")
    <div class="page-title">
        <h1>Today status</h1>
    </div>
    <div class="main-wrapper">
        <div id="external-events">
            <p>
                <strong>Events</strong>

                <div class='fc-event fc-h-event fc-daygrid-event fc-daygrid-block-event'>
                    <div class='fc-event-main'>Busy</div>
                </div>
                <div class='fc-event fc-h-event fc-daygrid-event fc-daygrid-block-event'>
                    <div class='fc-event-main'>Meeting</div>
                </div>
                <div class='fc-event fc-h-event fc-daygrid-event fc-daygrid-block-event'>
                    <div class='fc-event-main'>Break</div>
                </div>
                <div class='fc-event fc-h-event fc-daygrid-event fc-daygrid-block-event'>
                    <div class='fc-event-main'>Idle</div>
                </div>
            </p>
        </div>

        <div class="save-btn">
            <div>
                <button type="button" class="btn btn-primary" onclick="uploadCalendar()">Save changes</button>
            </div>
            <div style="margin-top:15px">
                <button type="button" class="btn btn-danger" onclick="clearCalendar()">Clear Calendar</button>
            </div>
         
        </div>
        <div class="calendar-container" style="margin-left:150px">
            <div id="calendar" style="margin: 15px">

            </div>
        </div>
    </div>


</div>


<script>

    var externalCalendar;

    document.addEventListener('DOMContentLoaded', function () {
        var Calendar = FullCalendar.Calendar;
        var Draggable = FullCalendar.Draggable;

        var containerEl = document.getElementById('external-events');
        var calendarEl = document.getElementById('calendar');

        var eventsList = [];

        new Draggable(containerEl, {
            itemSelector: '.fc-event',
            eventData: function (eventEl) {
                return {
                    title: eventEl.innerText
                };
            }
        });

        // initialize the calendar
        // -----------------------------------------------------------------

        var calendar = new Calendar(calendarEl, {
            headerToolbar: {
                start: "",
                center: "title",
                end: ""
            },
            initialView: 'timeGridDay',
            slotDuration: '00:10',
            nowIndicator: true,
            editable: true,
            navLinks: true,
            droppable: true, // this allows things to be dropped onto the calendar
            scrollTime: new Date().getTime(),
            slotMinTime: "07:00:00",
            slotMaxTime: "22:00:00",
            height: '100%',
            eventOverlap: false, //Do not allow for an event to overlap another event
            drop: function (info) {
                //make the checkes after an element is dropped
                //console.log(info.draggedEl)


                // is the "remove after drop" checkbox checked?
                //if (checkbox.checked) {
                //    // if so, remove the element from the "Draggable Events" list
                //    info.draggedEl.parentNode.removeChild(info.draggedEl);
                //}
            },
            businessHours: true,
            businessHours: {
                // days of week. an array of zero-based day of week integers (0=Sunday)
                daysOfWeek: [1, 2, 3, 4, 5], // Monday - Thursday

                startTime: '10:00', // a start time (10am in this example)
                endTime: '18:00', // an end time (6pm in this example)
            },
            eventReceive: function (info) {
                //Get the total number of events
                var count = getCountOfEvents()
                //When an event is received into the calendar, set the ID as an ExtendProperty.
                //It is the only way i found so that i can set an identifier to the event.
                //SetProp(id, 4) -> it is not working.

                info.event.setExtendedProp("id", count)
                info.event.setExtendedProp("comments", "")
            },
            eventClick: function (info) {
                var eventObj = info.event
                $('#modal').modal('show')
                SetModalInformation(eventObj.startStr, eventObj.endStr, eventObj.extendedProps.comments, eventObj.extendedProps.id)
            }
        });

        calendar.render();
        externalCalendar = calendar;

        function getCountOfEvents() {
            return calendar.getEvents().length
        }

    });

    function SetModalInformation(startdate, enddate, comments, id) {
        var modal = document.getElementById("modal");
        var startDate = modal.querySelector('[id=startDate]')
        var endDate = modal.querySelector('[id=endDate]')
        var commentsHtml = modal.querySelector('[id=comments]')
        var eventId = modal.querySelector('[id=eventId]')


        //Set time restriction for the dates input
        var currentDate = new Date();
        var month = (currentDate.getUTCMonth() < 10) ? "0" + currentDate.getUTCMonth() : currentDate.getUTCMonth()
        var day = (currentDate.getUTCDate() < 10) ? "0" + currentDate.getUTCDate() : currentDate.getUTCDate()

        var dateRestrictionMin = currentDate.getUTCFullYear() + "-" + month + "-" + day + "T00:00";
        var dateRestrictionMax = currentDate.getUTCFullYear() + "-" + month + "-" + day + "T23:00";

        setAttrbutetoHTML(startDate, "min", dateRestrictionMin)
        setAttrbutetoHTML(startDate, "max", dateRestrictionMax)

        setAttrbutetoHTML(endDate, "min", dateRestrictionMin)
        setAttrbutetoHTML(endDate, "max", dateRestrictionMax)


        //Set the fields to related information
        startDate.value = formatStrigDate(startdate)

        endDate.value = formatStrigDate(enddate)
        commentsHtml.value = comments
        eventId.value = id
    }

    function formatStrigDate(datestr) {
        
        var convertedStr = "";
        //if the date received is null or empty string, then we get the current date!
        if (datestr) {
            var len = datestr.length;
            convertedStr = datestr.substring(0, (len - 9));
        } else {
            var currentDate = new Date(new Date().getTime() - new Date().getTimezoneOffset() * 60000).toISOString();
            var len = currentDate.length;
            convertedStr = currentDate.substring(0, (len - 8));
        }

        return convertedStr
    }

    function setAttrbutetoHTML(htmltag, attribute, value) {

        if (htmltag != null) {
            htmltag.setAttribute(attribute, value)
        }
        else {
            //Throw and error?
        }

    }

    //Function for uploading all the events from the calendar
    function uploadCalendar() {
        //get list of events
        var eventsList = externalCalendar.getEvents();

    }

    //function for deleting all the events from the calendar
    function clearCalendar() {

    }

</script>





