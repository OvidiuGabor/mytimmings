@model mytimmings.Models.Portal.Portal
@Styles.Render("~/Portal/css")


@{

    if (Session["User"] != null)
    {

      
    <div class="main-body-container w3-main">
        @Html.Partial("_Notification")
        <div class="portal-menu-top-btn">
            <input type="button" class="btn btn-primary" value="Start Clock" name="StartTime" onclick="StartClock()" />

            <input type="button" class="btn btn-danger portal-status-btn" value="End Clock" name="EndTime" onclick="StopClock()" />
        </div>

        <div class="portal-menu-top-select-items">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group" style="display: inline-block">
                @Html.LabelFor(model => model.project, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.project, new SelectList(Model.projectList, "Value", "Text"), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.project, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group" style="display: inline-block">
                @Html.LabelFor(model => model.status, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.status, new SelectList(Model.statusList, "Value", "Text"), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.status, "", new { @class = "text-danger" })
                </div>
            </div>
            <input type="button" class="btn btn-dark portal-status-btn" value="Change Status" name="EndTime" onclick="UpdateStatus()" />
        </div>
        <div class="alert alert-dismissible fade in" role="alert">
            <strong> Error:</strong>
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        @if (Model.daysList.Count > 0)
        {
            <div id="status-bar">

                <div class="status-bar-tracker">
                    @*<div id="myBar" class="w3-container w3-green w3-center status-bar-interval" style="width: 0.00%">@Model.CurrentDayOverview.totalTime</div>*@
                </div>
                <div class="display-curent-status">
                    <div class="current-status-label" id="current-status-project">
                        Current Project: <strong>@Model.projectName</strong>
                    </div>
                    <div class="current-status-label" id="current-status-status">
                        Current Status: <strong>@Model.status</strong>
                    </div>
                    <div class="current-status-label" id="current-status-total-time">

                    </div>
                    <div class="current-status-label" id="current-status-max-time">
                        @*Max Time: @Model.CurrentDayOverview.maxWorkingTime*@



                    </div>
                    <script>
                        $(document).ready(function () {
                            var result = secondsToHms('@Model.CurrentDayOverview.maxWorkingTime')
                            var strong = document.createElement("strong")
                            strong.innerHTML = result
                            var rootel = document.getElementById("current-status-max-time")
                            rootel.innerHTML = "Max Time: "
                            rootel.appendChild(strong)

                        })

                    </script>

                </div>
            </div>
        }




        <div class="records-list-container">
            @{
                if (Model.daysList.Count > 0)
                {
                    <h2>Current Day Actions</h2>
                    foreach (var record in Model.daysList.OrderByDescending(x => x.startDate))
                    {
                        string startTime = record.startDate.ToLocalTime().ToString("HH:mm:ss");
                        string endTime = "";

                        if (record.endDate != null)
                        {
                            endTime = record.endDate.HasValue ? record.endDate.Value.ToLocalTime().ToString("HH:mm:ss") : "Running";
                        }

                        <div class="record-group">
                            <h5>
                                Status: @record.status
                            </h5>
                            <div class="record">
                                <p>Project: </p>    <p>@Html.DisplayFor(model => record.projectName)</p>
                            </div>
                            <div class="record">
                                <p>Start Clock: </p> <p>@startTime</p>
                            </div>
                            <div class="record">
                                <p>End Clock: </p> <p>@endTime</p>
                            </div>
                            <div class="record">
                                <p>Comments: </p> <p>@record.comments</p>
                            </div>
                            @*@if (endTime != "")
                            {
                                <div class="record">
                                    <p>
                                        @Html.ActionLink("Edit", "EditRecord", new { id = record.id })
                                    </p>
                                </div>
                            }*@

                        </div>

                    }

                    <script>
                        function setColor() {
                            var rootDiv = document.getElementsByClassName("record-group")
                            for (var i = 0; i < rootDiv.length; i++) {
                                var currentEl = rootDiv[i]
                                var record = currentEl.getElementsByTagName("h5")[0];
                                var elText = record.innerHTML;

                                if (elText.includes("On Duty")) {
                                    currentEl.classList.add("w3-blue")
                                }
                                if (elText.includes("Break")) {
                                    currentEl.classList.add("w3-red")
                                }
                                if (elText.includes("Meeting")) {
                                    currentEl.classList.add("w3-black")
                                }
                                if (elText.includes("Extra Time")) {
                                    currentEl.classList.add("w3-green")
                                }
                                if (elText.includes("Available")) {
                                    currentEl.classList.add("w3-purple")
                                }
                            }
                        }

                        setColor();
                    </script>
                }
            }
        </div>

    </div>

    <script>

            //function move() {
            //    var elem = document.getElementById("myBar");
            //    var width = 20;
            //    var id = setInterval(frame, 10);
            //    function frame() {
            //        if (width >= 100) {
            //            clearInterval(id);
            //        } else {
            //            width++;
            //            elem.style.width = width + '%';
            //            elem.innerHTML = width * 1 + '%';
            //        }
            //    }
    //}


            $(document).ready(function () {

                var ServerModel = @Html.Raw(Json.Encode(Model));

                var TotalTimeToday = ServerModel.CurrentDayOverview.totalTimeMilisec
                var maxtime = ServerModel.CurrentDayOverview.maxWorkingTime
                var lastElement;

                //We need to go through every daylist and for each record we need to create a line, that represents the current passed interval.
                if (ServerModel.daysList.length > 0) {
                    for (var i = 0; i < ServerModel.daysList.length; i++) {
                        var currentItem = ServerModel.daysList[i]
                        generateStatusBar(currentItem, i, ServerModel.CurrentDayOverview.maxWorkingTime)

                        if (ServerModel.daysList[i].endDate == "null" || ServerModel.daysList[i].endDate == null) {
                            lastElement = ServerModel.daysList[i];
                        }
                    }
                    //if (totaltimefortoday > maxtime) {
                    //    var lastItem = ServerModel.daysList[ServerModel.daysList.length];
                    //    var totaltimelastiteml
                    //}
                }

                // Creste a timer, that will track the current status, and update the time on the view.
                //it will only take the day where end day is null
                function CreateTimer() {
                    var startTime = new Date(Number(lastElement.startDate.replace(/\D/g, '')));
                    //convert from utc to local time
                    //startTime.setMinutes(startTime.getMinutes() - startTime.getTimezoneOffset())           
                    //Convert it to the miliseconds
                    var milisecondsSoFar = startTime.getTime()
                    var currentDate = new Date().getTime();
                    var date = new Date();
                    var currentDate = ConvertToUTC(new Date());
                    var milipassed = (currentDate - milisecondsSoFar) / 1000

                    var getElements = document.getElementById("status-bar").getElementsByClassName("status-bar-interval")
                    var getlastElement = getElements[getElements.length - 1]
                    getlastElement.innerHTML = secondsToHms(milipassed)
                    getlastElement.style.width = (((milipassed * 100) / maxtime)) + "%"
                    //Calculate total time for today based in the clock from the view
                    var newTotalTimeToday = (TotalTimeToday - lastElement.totalTime) + milipassed
                    var strong = document.createElement("strong")
                    strong.innerHTML = secondsToHms(newTotalTimeToday)
                    var el = document.getElementById("current-status-total-time")
                    el.innerHTML = "Total Time: "
                    el.appendChild(strong);
                    // if the total time for today is greater then the max working time, then we add extra time into the table.
                    //we end the current status and add a new record into the database called Extra Time.
                    //this will stay into the database, but wont the shown into the records, unless it is changed to OT manually by the user, for the current day, or by the supervisor for the current month
                    if (newTotalTimeToday > maxtime && lastElement.status != "Extra Time") {
                        var element = document.getElementById("project");
                        var project = element.options[element.selectedIndex].value


                        var status = "Extra Time"

                        var obj = {
                            status: status,
                            project: project
                        }

                        $.post("@Url.Action("AddAditionalHours", "Portal")", obj, function (result) {
                            showAllertMessage(result)
                        })

                    }

                    if (lastElement.status == "Extra Time") {
                        var statusElements = document.getElementsByClassName("status-bar-interval");
                        var elementslength = statusElements.length - 1;
                        var widthtoSubstract = (((lastElement.totalTime / maxtime)  * 100) / (elementslength - 1)) /1000;
                        for (var i = 0; i < elementslength; i++) {
                            var elemwidth = getElements[i].style.width.slice(0, -1);
                            elemwidth = elemwidth - widthtoSubstract.toFixed(5);

                            statusElements[i].style.width = elemwidth + "%";
                        }

                    }
                }
                if (ServerModel.daysList.length > 0) {
                    if (lastElement.isRunning == true) {
                        setInterval(CreateTimer, 1000)

                    }
                }

            })

            //This function genereates the status bar, based on the result that is received from the controller
            // It is taking everyrow and creates a new block in the total time tracker
            

            //Create the Start Clock and End Clock Function, that will handle the 2 buttons for start and end of the day
            function StartClock() {
                //for start time, need to take the project from the user and the status he is on.
                //if those not set, then return error
                //will do a second check on the controller also


                var element = document.getElementById("project");
                var project = element.options[element.selectedIndex].value

                element = document.getElementById("status");
                var status = element.options[element.selectedIndex].value;

                var obj = {
                    status: status,
                    project: project
                }

                $.post("@Url.Action("StartClock", "Portal")", obj, function (result) {
                    showAllertMessage(result)
                    //if (result.result == "Error") {
                    //    //var buttonforallert = '<button type="button" class="close" data-dismiss="alert" aria-label="Close">'
                    //    //buttonforallert +=          ' <span aria-hidden="true">&times;</span>'
                    //    //buttonforallert +=             '</button>'
                    //    $('.alert').addClass("alert-danger")
                    //    $('.alert').addClass("show")

                    //    //based on the error that we receive, need to change the message

                    //    if (result.message != null) {
                    //        $(".alert").html("<strong>ERROR: </strong>" + result.message)
                    //    } else {
                    //        $(".alert").html("<strong>ERROR: </strong>" + result.projectError + " " + result.statusError)
                    //    }

                      

                    //    $('.alert').alert()


                    //    setTimeout(function () {
                    //        $('.alert').removeClass("show")
                    //        $('.alert').addClass("hide")

                    //    }, 5000)

                    //} else {
                    //    if (result.result == "Success") {
                    //        $('.alert').addClass("alert-success")
                    //        $('.alert').addClass("show")
                    //        if (result.message != null) {
                    //            $(".alert").html(result.message)
                    //        }
                    //        $('.alert').alert()


                    //        setTimeout(function () {
                    //            $('.alert').removeClass("show")
                    //            $('.alert').addClass("hide")

                    //        }, 5000)
                    //    }
                    //    location.reload();
                    //}

                })
            }

            function StopClock() {
                $.post("@Url.Action("StopClock", "Portal")", null, function (result) {

                    showAllertMessage(result)
                      //if (result.result == "Error") {
                      //    //var buttonforallert = '<button type="button" class="close" data-dismiss="alert" aria-label="Close">'
                      //    //buttonforallert +=          ' <span aria-hidden="true">&times;</span>'
                      //    //buttonforallert +=             '</button>'
                      //    $('.alert').addClass("alert-danger")
                      //    $('.alert').addClass("show")

                      //    //based on the error that we receive, need to change the message

                      //    if (result.message != null) {
                      //        $(".alert").html("<strong>ERROR: </strong>" + result.message)
                      //    } else {
                      //        $(".alert").html("<strong>ERROR: </strong>" + result.projectError + " " + result.statusError)
                      //    }



                      //    $('.alert').alert()


                      //    setTimeout(function () {
                      //        $('.alert').removeClass("show")
                      //        $('.alert').addClass("hide")

                      //    }, 5000)

                      //} else {
                      //    if (result.result == "Success") {
                      //        $('.alert').addClass("alert-success")
                      //        $('.alert').addClass("show")
                      //        if (result.message != null) {
                      //            $(".alert").html(result.message)
                      //        }
                      //        $('.alert').alert()


                      //        setTimeout(function () {
                      //            $('.alert').removeClass("show")
                      //            $('.alert').addClass("hide")

                      //        }, 5000)
                      //    }
                      //    location.reload();
                      //}
                     
                })
            }

            function UpdateStatus() {
                //for start time, need to take the project from the user and the status he is on.
                //if those not set, then return error
                //will do a second check on the controller also


                var element = document.getElementById("project");
                var project = element.options[element.selectedIndex].value

                element = document.getElementById("status");
                var status = element.options[element.selectedIndex].value;

                var obj = {
                    status: status,
                    project: project
                }

                $.post("@Url.Action("UpdateStatus", "Portal")", obj, function (result) {


                    showAllertMessage(result)


                    //if (result.result == "Error") {
                    //    //var buttonforallert = '<button type="button" class="close" data-dismiss="alert" aria-label="Close">'
                    //    //buttonforallert +=          ' <span aria-hidden="true">&times;</span>'
                    //    //buttonforallert +=             '</button>'
                    //    $('.alert').addClass("alert-danger")
                    //    $('.alert').addClass("show")
                    //    $(".alert").html("<strong>ERROR: </strong>" + result.projectError + " " + result.statusError)
                        
                    //    $('.alert').alert()


                    //    setTimeout(function () {
                    //        $('.alert').removeClass("show")
                    //        $('.alert').addClass("hide")

                    //    }, 5000)

                    //} else {
                    //    location.reload();
                    //}
                   

                })

                console.log(obj)
            }
        </script>
    }
    else
    {
        <script>
        window.location.href = "@Url.Action("Index","Home")";
        </script>
    }
}