@model mytimmings.Models.Activity.MyActivity

<div lass="w3-container conainer-padding">
    <div class="container-fluid">
        <div class="row" style= "margin-left: 0px">
            <div class="col-md-3">
                <div class="list-el-tile">
                    <div class="timesheet-title" style="margin-bottom: 20px; padding-right: 0;">
                        <h4>Projects</h4>
                    </div>
                    <div class="user-choice">
                        <label for="chageItems">Items</label>
                        <select onchange="changeNumber(value)" id="changeItems" name="chageItems">
                            <option value="5" selected> 5</option>
                            <option value="10"> 10</option>
                            <option value="50"> 50</option>
                            <option value="100"> 100</option>
                        </select>

                    </div>
                </div>


                @{
                    foreach (var project in Model.projects)
                    {

                        if (project.id == 0)
                        {
                            <div class="row">
                                <div class="col-md-12">
                                    <input type="checkbox" id="@project.id" name="@project.id" value="@project.id" checked onchange="filterLogsByProject(value)" class="projects-select-item" />
                                    <label for="@project.id">@project.name</label>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="row">
                                <div class="col-md-12">
                                    <input type="checkbox" id="@project.id" name="@project.id" value="@project.id" onchange="filterLogsByProject(value)" class="projects-select-item" />
                                    <label for="@project.id">@project.name</label>
                                </div>
                            </div>
                        }

                    }
                }
            </div>

            <div class="col-md-9" id="worklogs-container">

                <div class=" row list-el-tile">
                    <div class="timesheet-title col-md-11">
                        <h4>Time Sheet</h4>
                    </div>
                    <div class="new-task-btn-container col-md-1">
                        <button type="button" class="btn btn-primary new-task-style-btn" id="new-taks-btn" data-toggle="modal" data-target="#modal-right" data-toggle-class="modal-open-aside" onclick="getColors()">New Task</button>
                    </div>
                </div>
                @{ 
                    var workLogs = Model.workLogs.Take(Model.numberOfItems);
                }
                @foreach (var record in workLogs)
                {

                    string startTime = record.startDate.ToLocalTime().ToString("hh:mm tt");
                    string endTime = record.endDate.ToLocalTime().ToString("hh:mm tt");
                    string date = record.startDate.ToLocalTime().ToString("dd MMM yyyy");
                    int i = 0;


                    <div class="row w3-white alert-item small-box-shadow-cord round-corners-left-15 round-corners-right-15 work-record-container">
                        <div class="col-md-12">
                            <div class="row work-record-top-section">
                                <div class="col-md-11" style="padding-left: 0px;">
                                    <p class="work-record-time" style="display: inline-flex; padding-left: 0px; padding-right: 5%;">@startTime - @endTime</p>
                                    <p class="work-record-date" style="display: inline-flex; padding-left: 0px; padding-right: 5%;">@date</p>
                                    <p class="work-record-title" style="display: inline-flex; padding-left: 0px; padding-right: 5%;">@record.title</p>
                                    <p class="work-record-project" style="display: inline-flex; padding-left: 0px; padding-right: 5%;">@record.projectName</p>
                                </div>
                                <div class="col-md-1" style="padding-right: 0px; text-align: right; padding-left: 20px;">
                                    <button class="btn btn-primary edit-work-btn" data-toggle="modal" data-target="#exampleModal">Edit</button>
                                </div>
                            </div>
                            <div class="row work-record-middle-section">
                                @foreach (var tag in record.tags)
                                {

                                    //Default a background color, in case something happen with assigning the colors!.
                                    var backgroundColor = "rbga(167, 58, 232, 0.1)";
                                    var color = "rbga(167, 58, 232, 1)";

                                    if (!String.IsNullOrEmpty(record.tagsColors[i]))
                                    {
                                        backgroundColor = record.tagsColors[i].Replace(",1)", ",0.1)");
                                        color = record.tagsColors[i];
                                        <p style="color: @color; padding: 7px; margin: 12px; border-radius: 50px; font-size: 12px; background-color: @backgroundColor; margin-left: 0px;">@tag</p>

                                    }
                                    else
                                    {
                                        
                                        <p style="color:@color; padding: 7px; margin: 12px; border-radius: 50px;  font-size: 12px; background-color: @backgroundColor">@tag</p>
                                    }

                                    i++;

                                }

                            </div>
                            <div class="row work-record-bottom-section">
                                <p style="margin-top: 5px; margin-left: 0px; margin-bottom: 15px; padding: 0px;">@record.description</p>
                            </div>
                        </div>

                    </div>
                }

            </div>
        </div>

    </div>

</div>

<script>

    var colors = [];
    const defaultColors = ["rgba(74,125,255,1)", "rgba(82,206,44,1)", "rgba(255,136,0,1)", "rgba(249,57,57,1)", "rgba(101,107,123,1)"]

    function filterLogsByProject(projectId) {
        var numberOfItems = getNumberOfItems();

        var queryItems = {
            selectedItems: getSelectedProjects(),
            numberOfItems: numberOfItems
        }

        console.log(queryItems);



        sendjsonRequest(queryItems)

/*         var queryItems = JSON.stringify(queryItems)*/
        @*$.ajax({
            type: "post",
            url: '@Url.Action("TimeSheet", "Activity")',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ queryItems: queryItems}),
            dataType: "json",
            success: function (data) {
               //console.log(data.data)
                if (data.status == "success") {
                    generateWorkLogsByNumber(data.data.workLogs, data.data.numberOfItems)
                } else if (data.status == "error") {
                    notif.error(data.message, "Error");
                }


            },
            error: function (data) {
             notif.error("Something happen! Please try again later!", "Error");
            }

        })*@

    }

    function changeNumber(number) {
        //console.log(number);
        var selectedProjects = getSelectedProjects()

        var queryItems = {
            selectedItems: selectedProjects,
            numberOfItems: number
        }
        //console.log(JSON.stringify(queryItems))
        sendjsonRequest(queryItems)
        @*var queryItems = JSON.stringify(queryItems)
        $.ajax({
            type: "post",
            url: '@Url.Action("TimeSheet", "Activity")',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({ queryItems: queryItems}),
            dataType: "json",
            success: function (data) {
               //console.log(data.data)
                if (data.status == "success") {
                    generateWorkLogsByNumber(data.data.workLogs, data.data.numberOfItems)
                } else if (data.status == "error") {
                    notif.error(data.message, "Error");
                }


            },
            error: function (data) {
             notif.error("Something happen! Please try again later!", "Error");
            }

        })*@



    }

    function sendjsonRequest(data) {
        var notif = new Notifier();
        if (data) {
            var queryItems = JSON.stringify(data)
            $.ajax({
                type: "post",
                url: '@Url.Action("TimeSheet", "Activity")',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ queryItems: queryItems }),
                dataType: "json",
                success: function (data) {
                    //console.log(data.data)
                    if (data.status == "success") {
                        generateWorkLogsByNumber(data.data.workLogs, data.data.numberOfItems)
                    } else if (data.status == "error") {
                        notif.error(data.message, "Error");
                    }


                },
                error: function (data) {
                    notif.error("Something happen! Please try again later!", "Error");
                }

            })
        } else {
            notif.error("Something happen! No Data was selected!", "Error");
        }



    }

    function getSelectedProjects() {
        var selecteditems = [];

        var itemsAvailable = document.getElementsByClassName("projects-select-item");
        for (var i = 0; i < itemsAvailable.length; i++) {
            if (itemsAvailable[i].checked) {
                selecteditems.push(itemsAvailable[i].value);
            }
        }

        return selecteditems;
    }

    function getNumberOfItems() {
        //default number of items
        var numberOfItems = 5;

        var selectlist = document.getElementById("changeItems")

        if (selectlist)
            numberOfItems = selectlist.value;



        return numberOfItems;
    }

    function generateWorkLogsByNumber(workLogs, counter) {

        var container = document.getElementById("worklogs-container");
        removeExistingWorklogs(container)


        if (workLogs.length >  0) {
            if (workLogs.length >= counter) {
                //console.log("aaa")
                for (var i = 0; i < counter; i++) {
                    createWorklogElement(workLogs[i]);
                }
            } else if (workLogs.length < counter) {
               // console.log("bbb")
                for (var i = 0; i  < workLogs.length; i++) {
                    createWorklogElement(workLogs[i]);
                }
            }

        } else {
            //inform there are no worklogs
            let mainContainer = document.createElement("div");
            mainContainer.classList.add("row", "work-record-container");


            let colEl = document.createElement("div");
            colEl.classList.add("col-md-12");
            colEl.innerHTML = "<div style='text-align: center'>"
                + "<h2 style = 'padding: 35px; font-size: 20px'> No records!</h2>"
            mainContainer.appendChild(colEl)

            addElementToContainer(document.getElementById("worklogs-container"), mainContainer)
        }

    }

    //this function remove all the worklogs elements from the view
    function removeExistingWorklogs(container) {
        if (container != null || container!= "") {
            var elementsToRemove = container.getElementsByClassName("work-record-container");
            let elLength = elementsToRemove.length;
            for (var i = 0; i < elLength; i++) {
                //Remove the element at index 0
                elementsToRemove[0].remove();
            }
        }

    }

    //this is a template for create a worklog element on the view
    function createWorklogElement(worklog) {

        const options = {
            hour: 'numeric',
            minute: 'numeric',
            hour12: true
        };


        var startDateTime = ""
        var endDateTime = ""
        var recordDate = "";
        var title = "";
        var projectName = "";
        var description = "";

        if (worklog.startDate != null || worklog.startDate != "")
            //startDateTime = ConvertJsonDate(worklog.startDate).toLocaleTimeString("en-US", options);
            startDateTime = formatTimeInAMPM(ConvertJsonDate(worklog.startDate))
            recordDate = ConvertJsonDate(worklog.startDate).toIndianFormat();

        if (worklog.endDate != null || worklog.endDate != "")
            endDateTime = ConvertJsonDate(worklog.endDate).toLocaleTimeString("en-US", options);

        if (worklog.title != null)
            title = worklog.title;

        if (worklog.projectName != null)
            projectName = worklog.projectName

        if (worklog.description != null)
            description = worklog.description;


        let mainContainer = document.createElement("div");
        mainContainer.classList.add("row", "w3-white", "alert-item", "small-box-shadow-cord", "round-corners-left-15", "round-corners-right-15", "work-record-container");

        let colEl = document.createElement("div");
        colEl.classList.add("col-md-12");
        //top section of the worklog
        let topSectionEl = document.createElement("div");
        topSectionEl.classList.add("row", "work-record-top-section")
        topSectionEl.innerHTML = "<div class='col-md-11' style='padding-left: 0px;'>"
            + "<p class='work-record-time' style='display: inline-flex; padding-left: 0px; padding-right: 5%;'>" + startDateTime + " - " + endDateTime + "</p>"
            + "<p class='work-record-date' style='display: inline-flex; padding-left: 0px; padding-right: 5%;'>" + recordDate + "</p>"
            + "<p class='work-record-title' style='display: inline-flex; padding-left: 0px; padding-right: 5%;'>" + title + "</p>"
            + "<p class='work-record-project' style='display: inline-flex; padding-left: 0px; padding-right: 5%;'>" + projectName + "</p></div>"

            + "<div class='col-md-1' 'style='padding-right: 0px; text-align: right; padding-left: 20px;'><button class='btn btn-primary edit-work-btn'>Edit</button></div>"

        //middle section of the worklog
        let middleSectionEl = document.createElement("div");

        var backgroundColor = "rbga(167, 58, 232, 0.1)";
        var color = "rbga(167, 58, 232, 1)";


        middleSectionEl.classList.add("row", "work-record-middle-section")
        for (var i = 0; i < worklog.tags.length; i++) {

            if (worklog.tagsColors[i] != null || worklog.tagsColors[i] != "") {
                backgroundColor = worklog.tagsColors[i].replace(",1)", ",0.1)");
                color = worklog.tagsColors[i];
            }


            middleSectionEl.innerHTML += "<p style= 'padding: 7px; margin: 12px; border-radius: 50px; font-size: 12px; margin-left: 0px; color: " + color + "; background-color: " + backgroundColor + "'>" + worklog.tags[i] + "</p>"

        }
        //bottom section of the worklog
        let bottomSectionEl = document.createElement("div");
        bottomSectionEl.classList.add("row", "work-record-bottom-section")
        bottomSectionEl.innerHTML = "<p style='margin-top: 5px; margin-left: 0px; margin-bottom: 15px; padding: 0px;'>"  + description + "</p>"



         @*if (!String.IsNullOrEmpty(record.tagsColors[i]))
                                    {
                                        backgroundColor = record.tagsColors[i].Replace(",1)", ",0.1)");
                                        color = record.tagsColors[i];
                                        <p style="color: @color; padding: 7px; margin: 12px; border-radius: 50px; font-size: 12px; background-color: @backgroundColor; margin-left: 0px;">@tag</p>

                                    }
                                    else
                                    {

                                        <p style="color:@color; padding: 7px; margin: 12px; border-radius: 50px;  font-size: 12px; background-color: @backgroundColor">@tag</p>
                                    }*@


        //Append the section of the worklog
        colEl.appendChild(topSectionEl);
        colEl.appendChild(middleSectionEl);
        colEl.appendChild(bottomSectionEl);

        //append the worklog to the container of it.
        mainContainer.appendChild(colEl);

        addElementToContainer(document.getElementById("worklogs-container"), mainContainer)
    }

    //Append an Html element to the container
    function addElementToContainer(container, element) {


        if (container != null && element != null) {
            container.appendChild(element);
        } else {
            notif.error("Something happen! Please try again later!", "Error")
        }

    }

    //Function that sends an Ajax request and gets the list of of colors
    function getColors(){
        $.ajax({
            type: 'post',
            url: '@Url.Action("GetColors", "Activity")',
            success: function (data) {
                //console.log(data.data)
                if (data.status == "success") {
                    var tempcolors = data.data;
                    if (tempcolors.length > 0) {
                        colors = tempcolors
                    } else {
                        colors = defaultColors;
                    }

                } else if (data.status == "error") {
                    notif.error(data.message, "Error");
                }


            },
            error: function (data) {
                notif.error("Something happen! Please try again later!", "Error");
            }
        })
    }


</script>